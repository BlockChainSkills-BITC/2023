import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class EnergyStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","","8015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b2c9190810190612a65565b94508573ffffffffffffffffffffffffffffffffffffffff1663e8434e3989876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b859291906130a4565b602060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bd79190810190612a8e565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c3d57600080fd5b505af1158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c759190810190612b09565b604051908082528060200260200182016040528015611ca35781602001602082028038833980820191505090505b509250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d0f57600080fd5b505af1158015611d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d479190810190612b09565b821215611ec3578373ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611da39190613067565b602060405180830381600087803b158015611dbd57600080fd5b505af1158015611dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611df59190810190612ab7565b90508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e4a90613251565b602060405180830381600087803b158015611e6457600080fd5b505af1158015611e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e9c9190810190612b09565b8383815181101515611eaa57fe5b9060200190602002018181525050816001019150611cab565b829650505050505050919050565b6000806064444260405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611f335780518252602082019150602081019050602083039250611f0e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515611f6d57fe5b079050604681128015611f805750603281135b15611f8c57603c810190505b603281128015611f9c5750602881135b15611fa8576046810190505b602881128015611fb85750601e81135b15611fc4576050810190505b601e81128015611fd45750601481135b15611fe057605a810190505b6014811215611ff0576064810190505b60008113151561200157606e810190505b8091505090565b600060606000808492506000835114156120255760019350612250565b600091505b825182101561224b57828281518110151561204157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002905060207f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415801561214a575060097f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b80156121bd5750600a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b80156122305750600d7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561223e5760009350612250565b818060010192505061202a565b600193505b505050919050565b6060806040805190810160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525090506122db6040805190810160405280600881526020017f2766726f6d273a270000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b90506123998373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612333906131ae565b600060405180830381600087803b15801561234d57600080fd5b505af1158015612361573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061238a9190810190612b73565b8261282e90919063ffffffff16565b90506123e36040805190810160405280600281526020017f272c0000000000000000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b905061242d6040805190810160405280600681526020017f27746f273a2700000000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b90506124eb8373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161248590613104565b600060405180830381600087803b15801561249f57600080fd5b505af11580156124b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506124dc9190810190612b73565b8261282e90919063ffffffff16565b90506125356040805190810160405280600281526020017f272c0000000000000000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b905061257f6040805190810160405280600981526020017f27746f74616c273a2700000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b905061263d8373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125d790613203565b600060405180830381600087803b1580156125f157600080fd5b505af1158015612605573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061262e9190810190612b73565b8261282e90919063ffffffff16565b90506126876040805190810160405280600281526020017f272c0000000000000000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b90506126d16040805190810160405280600981526020017f277072696365273a2700000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b905061278f8373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161272990613159565b600060405180830381600087803b15801561274357600080fd5b505af1158015612757573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506127809190810190612b73565b8261282e90919063ffffffff16565b90506127d96040805190810160405280600181526020017f27000000000000000000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b90506128236040805190810160405280600181526020017f7d000000000000000000000000000000000000000000000000000000000000008152508261282e90919063ffffffff16565b905080915050919050565b6060600080600084518651016040519080825280601f01601f19166020018201604052801561286c5781602001602082028038833980820191505090505b50935060208601925060208501915060208401905061288d818488516128a5565b61289c865182018387516128a5565b50505092915050565b60005b6020821015156128cd57825184526020840193506020830192506020820391506128a8565b6001826020036101000a0390508019835116818551168181178652505050505050565b60006128fc82356133e8565b905092915050565b60006129108251613408565b905092915050565b6000612924825161341a565b905092915050565b6000612938825161342c565b905092915050565b600061294c825161343e565b905092915050565b60006129608235613450565b905092915050565b60006129748251613450565b905092915050565b600082601f830112151561298f57600080fd5b81356129a261299d8261331c565b6132ef565b915080825260208301602083018583830111156129be57600080fd5b6129c9838284613488565b50505092915050565b600082601f83011215156129e557600080fd5b81516129f86129f38261331c565b6132ef565b91508082526020830160208301858383011115612a1457600080fd5b612a1f838284613497565b50505092915050565b6000612a34823561345a565b905092915050565b600060208284031215612a4e57600080fd5b6000612a5c848285016128f0565b91505092915050565b600060208284031215612a7757600080fd5b6000612a8584828501612904565b91505092915050565b600060208284031215612aa057600080fd5b6000612aae84828501612918565b91505092915050565b600060208284031215612ac957600080fd5b6000612ad78482850161292c565b91505092915050565b600060208284031215612af257600080fd5b6000612b0084","828501612940565b91505092915050565b600060208284031215612b1b57600080fd5b6000612b2984828501612968565b91505092915050565b600060208284031215612b4457600080fd5b600082013567ffffffffffffffff811115612b5e57600080fd5b612b6a8482850161297c565b91505092915050565b600060208284031215612b8557600080fd5b600082015167ffffffffffffffff811115612b9f57600080fd5b612bab848285016129d2565b91505092915050565b60008060408385031215612bc757600080fd5b600083013567ffffffffffffffff811115612be157600080fd5b612bed8582860161297c565b925050602083013567ffffffffffffffff811115612c0a57600080fd5b612c168582860161297c565b9150509250929050565b600080600080600060a08688031215612c3857600080fd5b600086013567ffffffffffffffff811115612c5257600080fd5b612c5e8882890161297c565b955050602086013567ffffffffffffffff811115612c7b57600080fd5b612c878882890161297c565b945050604086013567ffffffffffffffff811115612ca457600080fd5b612cb08882890161297c565b9350506060612cc188828901612954565b925050608086013567ffffffffffffffff811115612cde57600080fd5b612cea8882890161297c565b9150509295509295909350565b60008060408385031215612d0a57600080fd5b600083013567ffffffffffffffff811115612d2457600080fd5b612d308582860161297c565b9250506020612d4185828601612a28565b9150509250929050565b612d54816133a8565b82525050565b6000612d6582613362565b808452602084019350612d7783613348565b60005b82811015612da957612d8d868351612e50565b612d968261338e565b9150602086019550600181019050612d7a565b50849250505092915050565b6000612dc08261336d565b80845260208401935083602082028501612dd985613355565b60005b84811015612e12578383038852612df4838351612e95565b9250612dff8261339b565b9150602088019750600181019050612ddc565b508196508694505050505092915050565b612e2c816133c8565b82525050565b612e3b81613464565b82525050565b612e4a81613476565b82525050565b612e59816133d4565b82525050565b6000612e6a82613383565b808452612e7e816020860160208601613497565b612e87816134ca565b602085010191505092915050565b6000612ea082613378565b808452612eb4816020860160208601613497565b612ebd816134ca565b602085010191505092915050565b6000600282527f746f0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f70726963650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f66726f6d000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f746f74616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f656e6572677900000000000000000000000000000000000000000000000000006020830152604082019050919050565b612fe7816133de565b82525050565b60006020820190506130026000830184612d4b565b92915050565b600060208201905081810360008301526130228184612d5a565b905092915050565b600060208201905081810360008301526130448184612db5565b905092915050565b60006020820190506130616000830184612e23565b92915050565b600060208201905061307c6000830184612e50565b92915050565b6000602082019050818103600083015261309c8184612e95565b905092915050565b600060408201905081810360008301526130be8185612e5f565b90506130cd6020830184612e32565b9392505050565b600060408201905081810360008301526130ee8185612e5f565b90506130fd6020830184612e41565b9392505050565b6000602082019050818103600083015261311d81612ecb565b9050919050565b6000604082019050818103600083015261313d81612ecb565b905081810360208301526131518184612e5f565b905092915050565b6000602082019050818103600083015261317281612f02565b9050919050565b6000604082019050818103600083015261319281612f02565b905081810360208301526131a68184612e5f565b905092915050565b600060208201905081810360008301526131c781612f39565b9050919050565b600060408201905081810360008301526131e781612f39565b905081810360208301526131fb8184612e5f565b905092915050565b6000602082019050818103600083015261321c81612f70565b9050919050565b6000604082019050818103600083015261323c81612f70565b905061324b6020830184612e50565b92915050565b6000602082019050818103600083015261326a81612fa7565b9050919050565b6000604082019050818103600083015261328a81612fa7565b90506132996020830184612e50565b92915050565b600060408201905081810360008301526132b881612fa7565b905081810360208301526132cc8184612e5f565b905092915050565b60006020820190506132e96000830184612fde565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561331257600080fd5b8060405250919050565b600067ffffffffffffffff82111561333357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613413826133a8565b9050919050565b6000613425826133a8565b9050919050565b6000613437826133a8565b9050919050565b6000613449826133a8565b9050919050565b6000819050919050565b6000819050919050565b600061346f826133a8565b9050919050565b6000613481826133a8565b9050919050565b82818337600083830152505050565b60005b838110156134b557808201518184015260208101905061349a565b838111156134c4576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058209ebfdad188138082d940d51c9ac0a326c04c8666211511cd0727667dfb05869c6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_numid\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numid\",\"type\":\"string\"},{\"name\":\"_energy\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_from\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"string\"},{\"name\":\"_total\",\"type\":\"int256\"},{\"name\":\"_price\",\"type\":\"string\"}],\"name\":\"insert2\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numid\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numid\",\"type\":\"string\"}],\"name\":\"getEnergy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numid\",\"type\":\"string\"},{\"name\":\"sallE\",\"type\":\"uint256\"}],\"name\":\"update_sall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numid\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_INSERT2 = "insert2";

    public static final String FUNC_GETORDER = "getOrder";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_GETENERGY = "getEnergy";

    public static final String FUNC_UPDATE_SALL = "update_sall";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SELECT = "select";

    public static final Event RESULT_EVENT = new Event("Result", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected EnergyStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt update(String _numid) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(String _numid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String _numid) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String _numid, String _energy) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_energy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String _numid, String _energy, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_energy)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String _numid, String _energy) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_energy)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt insert2(String _id, String _from, String _to, BigInteger _total, String _price) {
        final Function function = new Function(
                FUNC_INSERT2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_total), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert2(String _id, String _from, String _to, BigInteger _total, String _price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_total), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_price)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert2(String _id, String _from, String _to, BigInteger _total, String _price) {
        final Function function = new Function(
                FUNC_INSERT2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_total), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, BigInteger, String> getInsert2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getInsert2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List getOrder(String _id) throws ContractException {
        final Function function = new Function(FUNC_GETORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt insert(String _numid) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String _numid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String _numid) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getEnergy(String _numid) throws ContractException {
        final Function function = new Function(FUNC_GETENERGY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt update_sall(String _numid, BigInteger sallE) {
        final Function function = new Function(
                FUNC_UPDATE_SALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(sallE)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update_sall(String _numid, BigInteger sallE, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE_SALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(sallE)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate_sall(String _numid, BigInteger sallE) {
        final Function function = new Function(
                FUNC_UPDATE_SALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(sallE)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdate_sallInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE_SALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getUpdate_sallOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE_SALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferOwnership(String newOwner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTransferOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List select(String _numid) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_numid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List<ResultEventResponse> getResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESULT_EVENT, transactionReceipt);
        ArrayList<ResultEventResponse> responses = new ArrayList<ResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResultEventResponse typedResponse = new ResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnershipTransferredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnershipTransferredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static EnergyStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new EnergyStorage(contractAddress, client, credential);
    }

    public static EnergyStorage deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(EnergyStorage.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class ResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class OwnershipTransferredEventResponse {
        public TransactionReceipt.Logs log;

        public String previousOwner;

        public String newOwner;
    }
}
